class MyCircularDeque:

    def __init__(self, k: int):
        self.circulardeque = []
        self.max_len = k
        
    def insertFront(self, value: int) -> bool:
        if self.isFull():
            return False
        dummy_list = [value]
        for val in self.circulardeque:
            dummy_list.append(val)
        self.circulardeque = dummy_list.copy()
        return True

    def insertLast(self, value: int) -> bool:
        if self.isFull():
            return False
        self.circulardeque.append(value)
        return True

    def deleteFront(self) -> bool:
        if self.isEmpty():
            return False
        self.circulardeque = self.circulardeque[1:]
        return True

    def deleteLast(self) -> bool:
        if self.isEmpty():
            return False        
        self.circulardeque = self.circulardeque[:-1]
        return True

    def getFront(self) -> int:
        if not self.isEmpty():
            return self.circulardeque[0]
        else:
            return -1

    def getRear(self) -> int:
        if not self.isEmpty():
            return self.circulardeque[-1]
        else:
            return -1

    def isEmpty(self) -> bool:
        if len(self.circulardeque) == 0:
            return True
        else:
            return False        

    def isFull(self) -> bool:
        if len(self.circulardeque) == self.max_len:
            return True
        else:
            return False
        


# Your MyCircularDeque object will be instantiated and called as such:
# obj = MyCircularDeque(k)
# param_1 = obj.insertFront(value)
# param_2 = obj.insertLast(value)
# param_3 = obj.deleteFront()
# param_4 = obj.deleteLast()
# param_5 = obj.getFront()
# param_6 = obj.getRear()
# param_7 = obj.isEmpty()
# param_8 = obj.isFull()
