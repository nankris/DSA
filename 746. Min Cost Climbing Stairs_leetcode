class Solution:
    def minCostClimbingStairs(self, cost: List[int]) -> int:
        dp = [0]*len(cost)
        print(dp)

        dp[len(cost)-1] = cost[-1]
        # This is for top we are assigning 0
        dp.append(0)

        for i in range(len(cost)-2, -1, -1):
            dp[i] = cost[i] + min(dp[i+1], dp[i+2])
        

        return min(dp[0], dp[1])


# With recursion and memoization
class Solution:
    def minCostClimbingStairs(self, cost: List[int]) -> int:

        def mincost(i, memo):
            if i >= len(cost):
                return 0
            
            # memoization
            if i in memo:
                return memo[i]
            
            step1 = cost[i] + mincost(i+1, memo)
            step2 = cost[i] + mincost(i+2, memo)

            memo[i] = min(step1, step2)

            return memo[i]

        memo = {}

        return min(mincost(0, memo), mincost(1, memo))
