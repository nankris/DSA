# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def kthSmallest(self, root: Optional[TreeNode], k: int) -> int:
        # Early exit
        self.count = 0
        self.result = None

        def traverse(node):
            if not node or self.result is not None:
                return
            
            traverse(node.left)
            
            self.count += 1
            if self.count == k:
                self.result = node.val
                return
            
            traverse(node.right)
        
        traverse(root)
        return self.result


        # # Traverse the tree
        # lst = []
        # def traverse(node):
        #     if not node:
        #         return
            
        #     traverse(node.left)
        #     lst.append(node.val)
        #     traverse(node.right)            
        
        # traverse(root)
        # print(lst)

        # return lst[k-1]
        

