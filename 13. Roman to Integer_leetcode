class Solution:
    def romanToInt(self, s: str) -> int:
        hash_map = {"I": 1, "V": 5, "X": 10, "L": 50, "C": 100, "D": 500, "M": 1000}
        # we can apply sliding window?
        # So if a low value is present before high value, the value will be subtract of high value
        # Other than that, just add the remaining

        i = 0
        sm = 0
        while i < len(s)-1:
            if hash_map[s[i]] < hash_map[s[i+1]]:
                val = hash_map[s[i+1]] - hash_map[s[i]]
                i += 2
                sm += val
            else:
                sm += hash_map[s[i]]
                i += 1

        # This is edge case
        # When last element is not greater that just previous one        
        if i == len(s)-1:
            sm += hash_map[s[i]]

        return sm
