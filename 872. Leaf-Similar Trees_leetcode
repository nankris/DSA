# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def leafSimilar(self, root1: Optional[TreeNode], root2: Optional[TreeNode]) -> bool:
        # Doing level order traversal and noting down leaf nodes
        # then append them in a final list
        # do this for both root1 and root2 -> You will compare if these two lists are same?

        lst1 = self.dfs(root1, [])
        lst2 = self.dfs(root2, [])        

        #print(lst1, lst2)

        if lst1 == lst2:
            return True
        else:
            return False

    def dfs(self, root_, lst_):
        if not root_:
            return lst_        
        if not root_.left and not root_.right:
            lst_.append(root_.val)
            return lst_
        self.dfs(root_.left, lst_)  
        self.dfs(root_.right, lst_)
        return lst_






